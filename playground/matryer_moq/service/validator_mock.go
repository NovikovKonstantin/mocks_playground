// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"sync"
)

// Ensure, that ValidatorMock does implement Validator.
// If this is not the case, regenerate this file with moq.
var _ Validator[int64] = &ValidatorMock[int64]{}

// ValidatorMock is a mock implementation of Validator.
//
//	func TestSomethingThatUsesValidator(t *testing.T) {
//
//		// make and configure a mocked Validator
//		mockedValidator := &ValidatorMock{
//			CheckFunc: func(value int64) (bool, error) {
//				panic("mock out the Check method")
//			},
//			CheckGenericFunc: func(value T) (bool, error) {
//				panic("mock out the CheckGeneric method")
//			},
//			CheckGenericsFunc: func(values []T) (bool, error) {
//				panic("mock out the CheckGenerics method")
//			},
//		}
//
//		// use mockedValidator in code that requires Validator
//		// and then make assertions.
//
//	}
type ValidatorMock[T Number] struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(value int64) (bool, error)

	// CheckGenericFunc mocks the CheckGeneric method.
	CheckGenericFunc func(value T) (bool, error)

	// CheckGenericsFunc mocks the CheckGenerics method.
	CheckGenericsFunc func(values []T) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Value is the value argument value.
			Value int64
		}
		// CheckGeneric holds details about calls to the CheckGeneric method.
		CheckGeneric []struct {
			// Value is the value argument value.
			Value T
		}
		// CheckGenerics holds details about calls to the CheckGenerics method.
		CheckGenerics []struct {
			// Values is the values argument value.
			Values []T
		}
	}
	lockCheck         sync.RWMutex
	lockCheckGeneric  sync.RWMutex
	lockCheckGenerics sync.RWMutex
}

// Check calls CheckFunc.
func (mock *ValidatorMock[T]) Check(value int64) (bool, error) {
	if mock.CheckFunc == nil {
		panic("ValidatorMock.CheckFunc: method is nil but Validator.Check was just called")
	}
	callInfo := struct {
		Value int64
	}{
		Value: value,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(value)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedValidator.CheckCalls())
func (mock *ValidatorMock[T]) CheckCalls() []struct {
	Value int64
} {
	var calls []struct {
		Value int64
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}

// CheckGeneric calls CheckGenericFunc.
func (mock *ValidatorMock[T]) CheckGeneric(value T) (bool, error) {
	if mock.CheckGenericFunc == nil {
		panic("ValidatorMock.CheckGenericFunc: method is nil but Validator.CheckGeneric was just called")
	}
	callInfo := struct {
		Value T
	}{
		Value: value,
	}
	mock.lockCheckGeneric.Lock()
	mock.calls.CheckGeneric = append(mock.calls.CheckGeneric, callInfo)
	mock.lockCheckGeneric.Unlock()
	return mock.CheckGenericFunc(value)
}

// CheckGenericCalls gets all the calls that were made to CheckGeneric.
// Check the length with:
//
//	len(mockedValidator.CheckGenericCalls())
func (mock *ValidatorMock[T]) CheckGenericCalls() []struct {
	Value T
} {
	var calls []struct {
		Value T
	}
	mock.lockCheckGeneric.RLock()
	calls = mock.calls.CheckGeneric
	mock.lockCheckGeneric.RUnlock()
	return calls
}

// CheckGenerics calls CheckGenericsFunc.
func (mock *ValidatorMock[T]) CheckGenerics(values []T) (bool, error) {
	if mock.CheckGenericsFunc == nil {
		panic("ValidatorMock.CheckGenericsFunc: method is nil but Validator.CheckGenerics was just called")
	}
	callInfo := struct {
		Values []T
	}{
		Values: values,
	}
	mock.lockCheckGenerics.Lock()
	mock.calls.CheckGenerics = append(mock.calls.CheckGenerics, callInfo)
	mock.lockCheckGenerics.Unlock()
	return mock.CheckGenericsFunc(values)
}

// CheckGenericsCalls gets all the calls that were made to CheckGenerics.
// Check the length with:
//
//	len(mockedValidator.CheckGenericsCalls())
func (mock *ValidatorMock[T]) CheckGenericsCalls() []struct {
	Values []T
} {
	var calls []struct {
		Values []T
	}
	mock.lockCheckGenerics.RLock()
	calls = mock.calls.CheckGenerics
	mock.lockCheckGenerics.RUnlock()
	return calls
}
