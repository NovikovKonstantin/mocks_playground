package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i minimock-v3/service.Repository -o ./repository_mock_test.go -n RepositoryMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements Repository
type RepositoryMock struct {
	t minimock.Tester

	funcGet          func(keys []string) (ia1 []int64, err error)
	inspectFuncGet   func(keys []string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mRepositoryMockGet

	funcStore          func(values []int64) (sa1 []string, err error)
	inspectFuncStore   func(values []int64)
	afterStoreCounter  uint64
	beforeStoreCounter uint64
	StoreMock          mRepositoryMockStore
}

// NewRepositoryMock returns a mock for Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*RepositoryMockGetParams{}

	m.StoreMock = mRepositoryMockStore{mock: m}
	m.StoreMock.callArgs = []*RepositoryMockStoreParams{}

	return m
}

type mRepositoryMockGet struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetExpectation
	expectations       []*RepositoryMockGetExpectation

	callArgs []*RepositoryMockGetParams
	mutex    sync.RWMutex
}

// RepositoryMockGetExpectation specifies expectation struct of the Repository.Get
type RepositoryMockGetExpectation struct {
	mock    *RepositoryMock
	params  *RepositoryMockGetParams
	results *RepositoryMockGetResults
	Counter uint64
}

// RepositoryMockGetParams contains parameters of the Repository.Get
type RepositoryMockGetParams struct {
	keys []string
}

// RepositoryMockGetResults contains results of the Repository.Get
type RepositoryMockGetResults struct {
	ia1 []int64
	err error
}

// Expect sets up expected params for Repository.Get
func (mmGet *mRepositoryMockGet) Expect(keys []string) *mRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("RepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &RepositoryMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &RepositoryMockGetParams{keys}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the Repository.Get
func (mmGet *mRepositoryMockGet) Inspect(f func(keys []string)) *mRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by Repository.Get
func (mmGet *mRepositoryMockGet) Return(ia1 []int64, err error) *RepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("RepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &RepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &RepositoryMockGetResults{ia1, err}
	return mmGet.mock
}

// Set uses given function f to mock the Repository.Get method
func (mmGet *mRepositoryMockGet) Set(f func(keys []string) (ia1 []int64, err error)) *RepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the Repository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the Repository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the Repository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mRepositoryMockGet) When(keys []string) *RepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("RepositoryMock.Get mock is already set by Set")
	}

	expectation := &RepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &RepositoryMockGetParams{keys},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up Repository.Get return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetExpectation) Then(ia1 []int64, err error) *RepositoryMock {
	e.results = &RepositoryMockGetResults{ia1, err}
	return e.mock
}

// Get implements Repository
func (mmGet *RepositoryMock) Get(keys []string) (ia1 []int64, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(keys)
	}

	mm_params := &RepositoryMockGetParams{keys}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ia1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := RepositoryMockGetParams{keys}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("RepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the RepositoryMock.Get")
		}
		return (*mm_results).ia1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(keys)
	}
	mmGet.t.Fatalf("Unexpected call to RepositoryMock.Get. %v", keys)
	return
}

// GetAfterCounter returns a count of finished RepositoryMock.Get invocations
func (mmGet *RepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of RepositoryMock.Get invocations
func (mmGet *RepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mRepositoryMockGet) Calls() []*RepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*RepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.Get")
	}
}

type mRepositoryMockStore struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockStoreExpectation
	expectations       []*RepositoryMockStoreExpectation

	callArgs []*RepositoryMockStoreParams
	mutex    sync.RWMutex
}

// RepositoryMockStoreExpectation specifies expectation struct of the Repository.Store
type RepositoryMockStoreExpectation struct {
	mock    *RepositoryMock
	params  *RepositoryMockStoreParams
	results *RepositoryMockStoreResults
	Counter uint64
}

// RepositoryMockStoreParams contains parameters of the Repository.Store
type RepositoryMockStoreParams struct {
	values []int64
}

// RepositoryMockStoreResults contains results of the Repository.Store
type RepositoryMockStoreResults struct {
	sa1 []string
	err error
}

// Expect sets up expected params for Repository.Store
func (mmStore *mRepositoryMockStore) Expect(values []int64) *mRepositoryMockStore {
	if mmStore.mock.funcStore != nil {
		mmStore.mock.t.Fatalf("RepositoryMock.Store mock is already set by Set")
	}

	if mmStore.defaultExpectation == nil {
		mmStore.defaultExpectation = &RepositoryMockStoreExpectation{}
	}

	mmStore.defaultExpectation.params = &RepositoryMockStoreParams{values}
	for _, e := range mmStore.expectations {
		if minimock.Equal(e.params, mmStore.defaultExpectation.params) {
			mmStore.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStore.defaultExpectation.params)
		}
	}

	return mmStore
}

// Inspect accepts an inspector function that has same arguments as the Repository.Store
func (mmStore *mRepositoryMockStore) Inspect(f func(values []int64)) *mRepositoryMockStore {
	if mmStore.mock.inspectFuncStore != nil {
		mmStore.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Store")
	}

	mmStore.mock.inspectFuncStore = f

	return mmStore
}

// Return sets up results that will be returned by Repository.Store
func (mmStore *mRepositoryMockStore) Return(sa1 []string, err error) *RepositoryMock {
	if mmStore.mock.funcStore != nil {
		mmStore.mock.t.Fatalf("RepositoryMock.Store mock is already set by Set")
	}

	if mmStore.defaultExpectation == nil {
		mmStore.defaultExpectation = &RepositoryMockStoreExpectation{mock: mmStore.mock}
	}
	mmStore.defaultExpectation.results = &RepositoryMockStoreResults{sa1, err}
	return mmStore.mock
}

// Set uses given function f to mock the Repository.Store method
func (mmStore *mRepositoryMockStore) Set(f func(values []int64) (sa1 []string, err error)) *RepositoryMock {
	if mmStore.defaultExpectation != nil {
		mmStore.mock.t.Fatalf("Default expectation is already set for the Repository.Store method")
	}

	if len(mmStore.expectations) > 0 {
		mmStore.mock.t.Fatalf("Some expectations are already set for the Repository.Store method")
	}

	mmStore.mock.funcStore = f
	return mmStore.mock
}

// When sets expectation for the Repository.Store which will trigger the result defined by the following
// Then helper
func (mmStore *mRepositoryMockStore) When(values []int64) *RepositoryMockStoreExpectation {
	if mmStore.mock.funcStore != nil {
		mmStore.mock.t.Fatalf("RepositoryMock.Store mock is already set by Set")
	}

	expectation := &RepositoryMockStoreExpectation{
		mock:   mmStore.mock,
		params: &RepositoryMockStoreParams{values},
	}
	mmStore.expectations = append(mmStore.expectations, expectation)
	return expectation
}

// Then sets up Repository.Store return parameters for the expectation previously defined by the When method
func (e *RepositoryMockStoreExpectation) Then(sa1 []string, err error) *RepositoryMock {
	e.results = &RepositoryMockStoreResults{sa1, err}
	return e.mock
}

// Store implements Repository
func (mmStore *RepositoryMock) Store(values []int64) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmStore.beforeStoreCounter, 1)
	defer mm_atomic.AddUint64(&mmStore.afterStoreCounter, 1)

	if mmStore.inspectFuncStore != nil {
		mmStore.inspectFuncStore(values)
	}

	mm_params := &RepositoryMockStoreParams{values}

	// Record call args
	mmStore.StoreMock.mutex.Lock()
	mmStore.StoreMock.callArgs = append(mmStore.StoreMock.callArgs, mm_params)
	mmStore.StoreMock.mutex.Unlock()

	for _, e := range mmStore.StoreMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmStore.StoreMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStore.StoreMock.defaultExpectation.Counter, 1)
		mm_want := mmStore.StoreMock.defaultExpectation.params
		mm_got := RepositoryMockStoreParams{values}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStore.t.Errorf("RepositoryMock.Store got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStore.StoreMock.defaultExpectation.results
		if mm_results == nil {
			mmStore.t.Fatal("No results are set for the RepositoryMock.Store")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmStore.funcStore != nil {
		return mmStore.funcStore(values)
	}
	mmStore.t.Fatalf("Unexpected call to RepositoryMock.Store. %v", values)
	return
}

// StoreAfterCounter returns a count of finished RepositoryMock.Store invocations
func (mmStore *RepositoryMock) StoreAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStore.afterStoreCounter)
}

// StoreBeforeCounter returns a count of RepositoryMock.Store invocations
func (mmStore *RepositoryMock) StoreBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStore.beforeStoreCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Store.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStore *mRepositoryMockStore) Calls() []*RepositoryMockStoreParams {
	mmStore.mutex.RLock()

	argCopy := make([]*RepositoryMockStoreParams, len(mmStore.callArgs))
	copy(argCopy, mmStore.callArgs)

	mmStore.mutex.RUnlock()

	return argCopy
}

// MinimockStoreDone returns true if the count of the Store invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockStoreDone() bool {
	for _, e := range m.StoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStore != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		return false
	}
	return true
}

// MinimockStoreInspect logs each unmet expectation
func (m *RepositoryMock) MinimockStoreInspect() {
	for _, e := range m.StoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Store with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		if m.StoreMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.Store")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Store with params: %#v", *m.StoreMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStore != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.Store")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInspect()

		m.MinimockStoreInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone() &&
		m.MinimockStoreDone()
}
