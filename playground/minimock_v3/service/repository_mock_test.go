package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i minimock_v3/service.Repository -o ./repository_mock_test.go -n RepositoryMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements Repository
type RepositoryMock struct {
	t minimock.Tester

	funcGetByKey          func(key string) (i1 int64, err error)
	inspectFuncGetByKey   func(key string)
	afterGetByKeyCounter  uint64
	beforeGetByKeyCounter uint64
	GetByKeyMock          mRepositoryMockGetByKey

	funcGetList          func() (ia1 []int64, err error)
	inspectFuncGetList   func()
	afterGetListCounter  uint64
	beforeGetListCounter uint64
	GetListMock          mRepositoryMockGetList

	funcStore          func(value int64) (s1 string, err error)
	inspectFuncStore   func(value int64)
	afterStoreCounter  uint64
	beforeStoreCounter uint64
	StoreMock          mRepositoryMockStore
}

// NewRepositoryMock returns a mock for Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByKeyMock = mRepositoryMockGetByKey{mock: m}
	m.GetByKeyMock.callArgs = []*RepositoryMockGetByKeyParams{}

	m.GetListMock = mRepositoryMockGetList{mock: m}

	m.StoreMock = mRepositoryMockStore{mock: m}
	m.StoreMock.callArgs = []*RepositoryMockStoreParams{}

	return m
}

type mRepositoryMockGetByKey struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetByKeyExpectation
	expectations       []*RepositoryMockGetByKeyExpectation

	callArgs []*RepositoryMockGetByKeyParams
	mutex    sync.RWMutex
}

// RepositoryMockGetByKeyExpectation specifies expectation struct of the Repository.GetByKey
type RepositoryMockGetByKeyExpectation struct {
	mock    *RepositoryMock
	params  *RepositoryMockGetByKeyParams
	results *RepositoryMockGetByKeyResults
	Counter uint64
}

// RepositoryMockGetByKeyParams contains parameters of the Repository.GetByKey
type RepositoryMockGetByKeyParams struct {
	key string
}

// RepositoryMockGetByKeyResults contains results of the Repository.GetByKey
type RepositoryMockGetByKeyResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for Repository.GetByKey
func (mmGetByKey *mRepositoryMockGetByKey) Expect(key string) *mRepositoryMockGetByKey {
	if mmGetByKey.mock.funcGetByKey != nil {
		mmGetByKey.mock.t.Fatalf("RepositoryMock.GetByKey mock is already set by Set")
	}

	if mmGetByKey.defaultExpectation == nil {
		mmGetByKey.defaultExpectation = &RepositoryMockGetByKeyExpectation{}
	}

	mmGetByKey.defaultExpectation.params = &RepositoryMockGetByKeyParams{key}
	for _, e := range mmGetByKey.expectations {
		if minimock.Equal(e.params, mmGetByKey.defaultExpectation.params) {
			mmGetByKey.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByKey.defaultExpectation.params)
		}
	}

	return mmGetByKey
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetByKey
func (mmGetByKey *mRepositoryMockGetByKey) Inspect(f func(key string)) *mRepositoryMockGetByKey {
	if mmGetByKey.mock.inspectFuncGetByKey != nil {
		mmGetByKey.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetByKey")
	}

	mmGetByKey.mock.inspectFuncGetByKey = f

	return mmGetByKey
}

// Return sets up results that will be returned by Repository.GetByKey
func (mmGetByKey *mRepositoryMockGetByKey) Return(i1 int64, err error) *RepositoryMock {
	if mmGetByKey.mock.funcGetByKey != nil {
		mmGetByKey.mock.t.Fatalf("RepositoryMock.GetByKey mock is already set by Set")
	}

	if mmGetByKey.defaultExpectation == nil {
		mmGetByKey.defaultExpectation = &RepositoryMockGetByKeyExpectation{mock: mmGetByKey.mock}
	}
	mmGetByKey.defaultExpectation.results = &RepositoryMockGetByKeyResults{i1, err}
	return mmGetByKey.mock
}

//Set uses given function f to mock the Repository.GetByKey method
func (mmGetByKey *mRepositoryMockGetByKey) Set(f func(key string) (i1 int64, err error)) *RepositoryMock {
	if mmGetByKey.defaultExpectation != nil {
		mmGetByKey.mock.t.Fatalf("Default expectation is already set for the Repository.GetByKey method")
	}

	if len(mmGetByKey.expectations) > 0 {
		mmGetByKey.mock.t.Fatalf("Some expectations are already set for the Repository.GetByKey method")
	}

	mmGetByKey.mock.funcGetByKey = f
	return mmGetByKey.mock
}

// When sets expectation for the Repository.GetByKey which will trigger the result defined by the following
// Then helper
func (mmGetByKey *mRepositoryMockGetByKey) When(key string) *RepositoryMockGetByKeyExpectation {
	if mmGetByKey.mock.funcGetByKey != nil {
		mmGetByKey.mock.t.Fatalf("RepositoryMock.GetByKey mock is already set by Set")
	}

	expectation := &RepositoryMockGetByKeyExpectation{
		mock:   mmGetByKey.mock,
		params: &RepositoryMockGetByKeyParams{key},
	}
	mmGetByKey.expectations = append(mmGetByKey.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetByKey return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetByKeyExpectation) Then(i1 int64, err error) *RepositoryMock {
	e.results = &RepositoryMockGetByKeyResults{i1, err}
	return e.mock
}

// GetByKey implements Repository
func (mmGetByKey *RepositoryMock) GetByKey(key string) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmGetByKey.beforeGetByKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByKey.afterGetByKeyCounter, 1)

	if mmGetByKey.inspectFuncGetByKey != nil {
		mmGetByKey.inspectFuncGetByKey(key)
	}

	mm_params := &RepositoryMockGetByKeyParams{key}

	// Record call args
	mmGetByKey.GetByKeyMock.mutex.Lock()
	mmGetByKey.GetByKeyMock.callArgs = append(mmGetByKey.GetByKeyMock.callArgs, mm_params)
	mmGetByKey.GetByKeyMock.mutex.Unlock()

	for _, e := range mmGetByKey.GetByKeyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmGetByKey.GetByKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByKey.GetByKeyMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByKey.GetByKeyMock.defaultExpectation.params
		mm_got := RepositoryMockGetByKeyParams{key}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByKey.t.Errorf("RepositoryMock.GetByKey got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByKey.GetByKeyMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByKey.t.Fatal("No results are set for the RepositoryMock.GetByKey")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmGetByKey.funcGetByKey != nil {
		return mmGetByKey.funcGetByKey(key)
	}
	mmGetByKey.t.Fatalf("Unexpected call to RepositoryMock.GetByKey. %v", key)
	return
}

// GetByKeyAfterCounter returns a count of finished RepositoryMock.GetByKey invocations
func (mmGetByKey *RepositoryMock) GetByKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByKey.afterGetByKeyCounter)
}

// GetByKeyBeforeCounter returns a count of RepositoryMock.GetByKey invocations
func (mmGetByKey *RepositoryMock) GetByKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByKey.beforeGetByKeyCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetByKey.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByKey *mRepositoryMockGetByKey) Calls() []*RepositoryMockGetByKeyParams {
	mmGetByKey.mutex.RLock()

	argCopy := make([]*RepositoryMockGetByKeyParams, len(mmGetByKey.callArgs))
	copy(argCopy, mmGetByKey.callArgs)

	mmGetByKey.mutex.RUnlock()

	return argCopy
}

// MinimockGetByKeyDone returns true if the count of the GetByKey invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetByKeyDone() bool {
	for _, e := range m.GetByKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByKey != nil && mm_atomic.LoadUint64(&m.afterGetByKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByKeyInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetByKeyInspect() {
	for _, e := range m.GetByKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetByKey with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByKeyCounter) < 1 {
		if m.GetByKeyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetByKey")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetByKey with params: %#v", *m.GetByKeyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByKey != nil && mm_atomic.LoadUint64(&m.afterGetByKeyCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.GetByKey")
	}
}

type mRepositoryMockGetList struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetListExpectation
	expectations       []*RepositoryMockGetListExpectation
}

// RepositoryMockGetListExpectation specifies expectation struct of the Repository.GetList
type RepositoryMockGetListExpectation struct {
	mock *RepositoryMock

	results *RepositoryMockGetListResults
	Counter uint64
}

// RepositoryMockGetListResults contains results of the Repository.GetList
type RepositoryMockGetListResults struct {
	ia1 []int64
	err error
}

// Expect sets up expected params for Repository.GetList
func (mmGetList *mRepositoryMockGetList) Expect() *mRepositoryMockGetList {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("RepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &RepositoryMockGetListExpectation{}
	}

	return mmGetList
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetList
func (mmGetList *mRepositoryMockGetList) Inspect(f func()) *mRepositoryMockGetList {
	if mmGetList.mock.inspectFuncGetList != nil {
		mmGetList.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetList")
	}

	mmGetList.mock.inspectFuncGetList = f

	return mmGetList
}

// Return sets up results that will be returned by Repository.GetList
func (mmGetList *mRepositoryMockGetList) Return(ia1 []int64, err error) *RepositoryMock {
	if mmGetList.mock.funcGetList != nil {
		mmGetList.mock.t.Fatalf("RepositoryMock.GetList mock is already set by Set")
	}

	if mmGetList.defaultExpectation == nil {
		mmGetList.defaultExpectation = &RepositoryMockGetListExpectation{mock: mmGetList.mock}
	}
	mmGetList.defaultExpectation.results = &RepositoryMockGetListResults{ia1, err}
	return mmGetList.mock
}

//Set uses given function f to mock the Repository.GetList method
func (mmGetList *mRepositoryMockGetList) Set(f func() (ia1 []int64, err error)) *RepositoryMock {
	if mmGetList.defaultExpectation != nil {
		mmGetList.mock.t.Fatalf("Default expectation is already set for the Repository.GetList method")
	}

	if len(mmGetList.expectations) > 0 {
		mmGetList.mock.t.Fatalf("Some expectations are already set for the Repository.GetList method")
	}

	mmGetList.mock.funcGetList = f
	return mmGetList.mock
}

// GetList implements Repository
func (mmGetList *RepositoryMock) GetList() (ia1 []int64, err error) {
	mm_atomic.AddUint64(&mmGetList.beforeGetListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetList.afterGetListCounter, 1)

	if mmGetList.inspectFuncGetList != nil {
		mmGetList.inspectFuncGetList()
	}

	if mmGetList.GetListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetList.GetListMock.defaultExpectation.Counter, 1)

		mm_results := mmGetList.GetListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetList.t.Fatal("No results are set for the RepositoryMock.GetList")
		}
		return (*mm_results).ia1, (*mm_results).err
	}
	if mmGetList.funcGetList != nil {
		return mmGetList.funcGetList()
	}
	mmGetList.t.Fatalf("Unexpected call to RepositoryMock.GetList.")
	return
}

// GetListAfterCounter returns a count of finished RepositoryMock.GetList invocations
func (mmGetList *RepositoryMock) GetListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.afterGetListCounter)
}

// GetListBeforeCounter returns a count of RepositoryMock.GetList invocations
func (mmGetList *RepositoryMock) GetListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetList.beforeGetListCounter)
}

// MinimockGetListDone returns true if the count of the GetList invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetListDone() bool {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetListInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetListInspect() {
	for _, e := range m.GetListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RepositoryMock.GetList")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetListMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.GetList")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetList != nil && mm_atomic.LoadUint64(&m.afterGetListCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.GetList")
	}
}

type mRepositoryMockStore struct {
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockStoreExpectation
	expectations       []*RepositoryMockStoreExpectation

	callArgs []*RepositoryMockStoreParams
	mutex    sync.RWMutex
}

// RepositoryMockStoreExpectation specifies expectation struct of the Repository.Store
type RepositoryMockStoreExpectation struct {
	mock    *RepositoryMock
	params  *RepositoryMockStoreParams
	results *RepositoryMockStoreResults
	Counter uint64
}

// RepositoryMockStoreParams contains parameters of the Repository.Store
type RepositoryMockStoreParams struct {
	value int64
}

// RepositoryMockStoreResults contains results of the Repository.Store
type RepositoryMockStoreResults struct {
	s1  string
	err error
}

// Expect sets up expected params for Repository.Store
func (mmStore *mRepositoryMockStore) Expect(value int64) *mRepositoryMockStore {
	if mmStore.mock.funcStore != nil {
		mmStore.mock.t.Fatalf("RepositoryMock.Store mock is already set by Set")
	}

	if mmStore.defaultExpectation == nil {
		mmStore.defaultExpectation = &RepositoryMockStoreExpectation{}
	}

	mmStore.defaultExpectation.params = &RepositoryMockStoreParams{value}
	for _, e := range mmStore.expectations {
		if minimock.Equal(e.params, mmStore.defaultExpectation.params) {
			mmStore.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStore.defaultExpectation.params)
		}
	}

	return mmStore
}

// Inspect accepts an inspector function that has same arguments as the Repository.Store
func (mmStore *mRepositoryMockStore) Inspect(f func(value int64)) *mRepositoryMockStore {
	if mmStore.mock.inspectFuncStore != nil {
		mmStore.mock.t.Fatalf("Inspect function is already set for RepositoryMock.Store")
	}

	mmStore.mock.inspectFuncStore = f

	return mmStore
}

// Return sets up results that will be returned by Repository.Store
func (mmStore *mRepositoryMockStore) Return(s1 string, err error) *RepositoryMock {
	if mmStore.mock.funcStore != nil {
		mmStore.mock.t.Fatalf("RepositoryMock.Store mock is already set by Set")
	}

	if mmStore.defaultExpectation == nil {
		mmStore.defaultExpectation = &RepositoryMockStoreExpectation{mock: mmStore.mock}
	}
	mmStore.defaultExpectation.results = &RepositoryMockStoreResults{s1, err}
	return mmStore.mock
}

//Set uses given function f to mock the Repository.Store method
func (mmStore *mRepositoryMockStore) Set(f func(value int64) (s1 string, err error)) *RepositoryMock {
	if mmStore.defaultExpectation != nil {
		mmStore.mock.t.Fatalf("Default expectation is already set for the Repository.Store method")
	}

	if len(mmStore.expectations) > 0 {
		mmStore.mock.t.Fatalf("Some expectations are already set for the Repository.Store method")
	}

	mmStore.mock.funcStore = f
	return mmStore.mock
}

// When sets expectation for the Repository.Store which will trigger the result defined by the following
// Then helper
func (mmStore *mRepositoryMockStore) When(value int64) *RepositoryMockStoreExpectation {
	if mmStore.mock.funcStore != nil {
		mmStore.mock.t.Fatalf("RepositoryMock.Store mock is already set by Set")
	}

	expectation := &RepositoryMockStoreExpectation{
		mock:   mmStore.mock,
		params: &RepositoryMockStoreParams{value},
	}
	mmStore.expectations = append(mmStore.expectations, expectation)
	return expectation
}

// Then sets up Repository.Store return parameters for the expectation previously defined by the When method
func (e *RepositoryMockStoreExpectation) Then(s1 string, err error) *RepositoryMock {
	e.results = &RepositoryMockStoreResults{s1, err}
	return e.mock
}

// Store implements Repository
func (mmStore *RepositoryMock) Store(value int64) (s1 string, err error) {
	mm_atomic.AddUint64(&mmStore.beforeStoreCounter, 1)
	defer mm_atomic.AddUint64(&mmStore.afterStoreCounter, 1)

	if mmStore.inspectFuncStore != nil {
		mmStore.inspectFuncStore(value)
	}

	mm_params := &RepositoryMockStoreParams{value}

	// Record call args
	mmStore.StoreMock.mutex.Lock()
	mmStore.StoreMock.callArgs = append(mmStore.StoreMock.callArgs, mm_params)
	mmStore.StoreMock.mutex.Unlock()

	for _, e := range mmStore.StoreMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmStore.StoreMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStore.StoreMock.defaultExpectation.Counter, 1)
		mm_want := mmStore.StoreMock.defaultExpectation.params
		mm_got := RepositoryMockStoreParams{value}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStore.t.Errorf("RepositoryMock.Store got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStore.StoreMock.defaultExpectation.results
		if mm_results == nil {
			mmStore.t.Fatal("No results are set for the RepositoryMock.Store")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmStore.funcStore != nil {
		return mmStore.funcStore(value)
	}
	mmStore.t.Fatalf("Unexpected call to RepositoryMock.Store. %v", value)
	return
}

// StoreAfterCounter returns a count of finished RepositoryMock.Store invocations
func (mmStore *RepositoryMock) StoreAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStore.afterStoreCounter)
}

// StoreBeforeCounter returns a count of RepositoryMock.Store invocations
func (mmStore *RepositoryMock) StoreBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStore.beforeStoreCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.Store.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStore *mRepositoryMockStore) Calls() []*RepositoryMockStoreParams {
	mmStore.mutex.RLock()

	argCopy := make([]*RepositoryMockStoreParams, len(mmStore.callArgs))
	copy(argCopy, mmStore.callArgs)

	mmStore.mutex.RUnlock()

	return argCopy
}

// MinimockStoreDone returns true if the count of the Store invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockStoreDone() bool {
	for _, e := range m.StoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStore != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		return false
	}
	return true
}

// MinimockStoreInspect logs each unmet expectation
func (m *RepositoryMock) MinimockStoreInspect() {
	for _, e := range m.StoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.Store with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		if m.StoreMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.Store")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.Store with params: %#v", *m.StoreMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStore != nil && mm_atomic.LoadUint64(&m.afterStoreCounter) < 1 {
		m.t.Error("Expected call to RepositoryMock.Store")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetByKeyInspect()

		m.MinimockGetListInspect()

		m.MinimockStoreInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByKeyDone() &&
		m.MinimockGetListDone() &&
		m.MinimockStoreDone()
}
