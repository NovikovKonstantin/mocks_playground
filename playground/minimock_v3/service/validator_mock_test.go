package service

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i minimock_v3/service.Validator -o ./validator_mock_test.go -n ValidatorMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ValidatorMock implements Validator
type ValidatorMock struct {
	t minimock.Tester

	funcCheck          func(value int64) (b1 bool, err error)
	inspectFuncCheck   func(value int64)
	afterCheckCounter  uint64
	beforeCheckCounter uint64
	CheckMock          mValidatorMockCheck
}

// NewValidatorMock returns a mock for Validator
func NewValidatorMock(t minimock.Tester) *ValidatorMock {
	m := &ValidatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckMock = mValidatorMockCheck{mock: m}
	m.CheckMock.callArgs = []*ValidatorMockCheckParams{}

	return m
}

type mValidatorMockCheck struct {
	mock               *ValidatorMock
	defaultExpectation *ValidatorMockCheckExpectation
	expectations       []*ValidatorMockCheckExpectation

	callArgs []*ValidatorMockCheckParams
	mutex    sync.RWMutex
}

// ValidatorMockCheckExpectation specifies expectation struct of the Validator.Check
type ValidatorMockCheckExpectation struct {
	mock    *ValidatorMock
	params  *ValidatorMockCheckParams
	results *ValidatorMockCheckResults
	Counter uint64
}

// ValidatorMockCheckParams contains parameters of the Validator.Check
type ValidatorMockCheckParams struct {
	value int64
}

// ValidatorMockCheckResults contains results of the Validator.Check
type ValidatorMockCheckResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for Validator.Check
func (mmCheck *mValidatorMockCheck) Expect(value int64) *mValidatorMockCheck {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("ValidatorMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &ValidatorMockCheckExpectation{}
	}

	mmCheck.defaultExpectation.params = &ValidatorMockCheckParams{value}
	for _, e := range mmCheck.expectations {
		if minimock.Equal(e.params, mmCheck.defaultExpectation.params) {
			mmCheck.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheck.defaultExpectation.params)
		}
	}

	return mmCheck
}

// Inspect accepts an inspector function that has same arguments as the Validator.Check
func (mmCheck *mValidatorMockCheck) Inspect(f func(value int64)) *mValidatorMockCheck {
	if mmCheck.mock.inspectFuncCheck != nil {
		mmCheck.mock.t.Fatalf("Inspect function is already set for ValidatorMock.Check")
	}

	mmCheck.mock.inspectFuncCheck = f

	return mmCheck
}

// Return sets up results that will be returned by Validator.Check
func (mmCheck *mValidatorMockCheck) Return(b1 bool, err error) *ValidatorMock {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("ValidatorMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &ValidatorMockCheckExpectation{mock: mmCheck.mock}
	}
	mmCheck.defaultExpectation.results = &ValidatorMockCheckResults{b1, err}
	return mmCheck.mock
}

//Set uses given function f to mock the Validator.Check method
func (mmCheck *mValidatorMockCheck) Set(f func(value int64) (b1 bool, err error)) *ValidatorMock {
	if mmCheck.defaultExpectation != nil {
		mmCheck.mock.t.Fatalf("Default expectation is already set for the Validator.Check method")
	}

	if len(mmCheck.expectations) > 0 {
		mmCheck.mock.t.Fatalf("Some expectations are already set for the Validator.Check method")
	}

	mmCheck.mock.funcCheck = f
	return mmCheck.mock
}

// When sets expectation for the Validator.Check which will trigger the result defined by the following
// Then helper
func (mmCheck *mValidatorMockCheck) When(value int64) *ValidatorMockCheckExpectation {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("ValidatorMock.Check mock is already set by Set")
	}

	expectation := &ValidatorMockCheckExpectation{
		mock:   mmCheck.mock,
		params: &ValidatorMockCheckParams{value},
	}
	mmCheck.expectations = append(mmCheck.expectations, expectation)
	return expectation
}

// Then sets up Validator.Check return parameters for the expectation previously defined by the When method
func (e *ValidatorMockCheckExpectation) Then(b1 bool, err error) *ValidatorMock {
	e.results = &ValidatorMockCheckResults{b1, err}
	return e.mock
}

// Check implements Validator
func (mmCheck *ValidatorMock) Check(value int64) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmCheck.beforeCheckCounter, 1)
	defer mm_atomic.AddUint64(&mmCheck.afterCheckCounter, 1)

	if mmCheck.inspectFuncCheck != nil {
		mmCheck.inspectFuncCheck(value)
	}

	mm_params := &ValidatorMockCheckParams{value}

	// Record call args
	mmCheck.CheckMock.mutex.Lock()
	mmCheck.CheckMock.callArgs = append(mmCheck.CheckMock.callArgs, mm_params)
	mmCheck.CheckMock.mutex.Unlock()

	for _, e := range mmCheck.CheckMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmCheck.CheckMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheck.CheckMock.defaultExpectation.Counter, 1)
		mm_want := mmCheck.CheckMock.defaultExpectation.params
		mm_got := ValidatorMockCheckParams{value}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheck.t.Errorf("ValidatorMock.Check got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheck.CheckMock.defaultExpectation.results
		if mm_results == nil {
			mmCheck.t.Fatal("No results are set for the ValidatorMock.Check")
		}
		return (*mm_results).b1, (*mm_results).err
	}
	if mmCheck.funcCheck != nil {
		return mmCheck.funcCheck(value)
	}
	mmCheck.t.Fatalf("Unexpected call to ValidatorMock.Check. %v", value)
	return
}

// CheckAfterCounter returns a count of finished ValidatorMock.Check invocations
func (mmCheck *ValidatorMock) CheckAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheck.afterCheckCounter)
}

// CheckBeforeCounter returns a count of ValidatorMock.Check invocations
func (mmCheck *ValidatorMock) CheckBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheck.beforeCheckCounter)
}

// Calls returns a list of arguments used in each call to ValidatorMock.Check.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheck *mValidatorMockCheck) Calls() []*ValidatorMockCheckParams {
	mmCheck.mutex.RLock()

	argCopy := make([]*ValidatorMockCheckParams, len(mmCheck.callArgs))
	copy(argCopy, mmCheck.callArgs)

	mmCheck.mutex.RUnlock()

	return argCopy
}

// MinimockCheckDone returns true if the count of the Check invocations corresponds
// the number of defined expectations
func (m *ValidatorMock) MinimockCheckDone() bool {
	for _, e := range m.CheckMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheck != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckInspect logs each unmet expectation
func (m *ValidatorMock) MinimockCheckInspect() {
	for _, e := range m.CheckMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ValidatorMock.Check with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		if m.CheckMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ValidatorMock.Check")
		} else {
			m.t.Errorf("Expected call to ValidatorMock.Check with params: %#v", *m.CheckMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheck != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		m.t.Error("Expected call to ValidatorMock.Check")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ValidatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCheckInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ValidatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ValidatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckDone()
}
