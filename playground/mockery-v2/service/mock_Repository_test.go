// Code generated by mockery v2.30.15. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: keys
func (_m *MockRepository) Get(keys []string) ([]int64, error) {
	ret := _m.Called(keys)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]int64, error)); ok {
		return rf(keys)
	}
	if rf, ok := ret.Get(0).(func([]string) []int64); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - keys []string
func (_e *MockRepository_Expecter) Get(keys interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", keys)}
}

func (_c *MockRepository_Get_Call) Run(run func(keys []string)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(_a0 []int64, _a1 error) *MockRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func([]string) ([]int64, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: values
func (_m *MockRepository) Store(values []int64) ([]string, error) {
	ret := _m.Called(values)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]int64) ([]string, error)); ok {
		return rf(values)
	}
	if rf, ok := ret.Get(0).(func([]int64) []string); ok {
		r0 = rf(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]int64) error); ok {
		r1 = rf(values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockRepository_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - values []int64
func (_e *MockRepository_Expecter) Store(values interface{}) *MockRepository_Store_Call {
	return &MockRepository_Store_Call{Call: _e.mock.On("Store", values)}
}

func (_c *MockRepository_Store_Call) Run(run func(values []int64)) *MockRepository_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int64))
	})
	return _c
}

func (_c *MockRepository_Store_Call) Return(_a0 []string, _a1 error) *MockRepository_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Store_Call) RunAndReturn(run func([]int64) ([]string, error)) *MockRepository_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
