// Code generated by mockery v2.30.15. DO NOT EDIT.

package mocks

import (
	service "mockery-v2/service"

	mock "github.com/stretchr/testify/mock"
)

// Validator is an autogenerated mock type for the Validator type
type Validator[T service.Number] struct {
	mock.Mock
}

// Check provides a mock function with given fields: value
func (_m *Validator[T]) Check(value int64) (bool, error) {
	ret := _m.Called(value)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckGeneric provides a mock function with given fields: value
func (_m *Validator[T]) CheckGeneric(value T) (bool, error) {
	ret := _m.Called(value)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(T) (bool, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(T) bool); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckGenerics provides a mock function with given fields: values
func (_m *Validator[T]) CheckGenerics(values []T) (bool, error) {
	ret := _m.Called(values)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]T) (bool, error)); ok {
		return rf(values)
	}
	if rf, ok := ret.Get(0).(func([]T) bool); ok {
		r0 = rf(values)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]T) error); ok {
		r1 = rf(values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidator[T service.Number](t interface {
	mock.TestingT
	Cleanup(func())
}) *Validator[T] {
	mock := &Validator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
