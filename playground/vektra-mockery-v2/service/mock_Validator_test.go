// Code generated by mockery v2.30.15. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator[T Number] struct {
	mock.Mock
}

type MockValidator_Expecter[T Number] struct {
	mock *mock.Mock
}

func (_m *MockValidator[T]) EXPECT() *MockValidator_Expecter[T] {
	return &MockValidator_Expecter[T]{mock: &_m.Mock}
}

// Check provides a mock function with given fields: value
func (_m *MockValidator[T]) Check(value int64) (bool, error) {
	ret := _m.Called(value)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (bool, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockValidator_Check_Call[T Number] struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - value int64
func (_e *MockValidator_Expecter[T]) Check(value interface{}) *MockValidator_Check_Call[T] {
	return &MockValidator_Check_Call[T]{Call: _e.mock.On("Check", value)}
}

func (_c *MockValidator_Check_Call[T]) Run(run func(value int64)) *MockValidator_Check_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockValidator_Check_Call[T]) Return(_a0 bool, _a1 error) *MockValidator_Check_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_Check_Call[T]) RunAndReturn(run func(int64) (bool, error)) *MockValidator_Check_Call[T] {
	_c.Call.Return(run)
	return _c
}

// CheckGeneric provides a mock function with given fields: value
func (_m *MockValidator[T]) CheckGeneric(value T) (bool, error) {
	ret := _m.Called(value)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(T) (bool, error)); ok {
		return rf(value)
	}
	if rf, ok := ret.Get(0).(func(T) bool); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(T) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_CheckGeneric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGeneric'
type MockValidator_CheckGeneric_Call[T Number] struct {
	*mock.Call
}

// CheckGeneric is a helper method to define mock.On call
//   - value T
func (_e *MockValidator_Expecter[T]) CheckGeneric(value interface{}) *MockValidator_CheckGeneric_Call[T] {
	return &MockValidator_CheckGeneric_Call[T]{Call: _e.mock.On("CheckGeneric", value)}
}

func (_c *MockValidator_CheckGeneric_Call[T]) Run(run func(value T)) *MockValidator_CheckGeneric_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockValidator_CheckGeneric_Call[T]) Return(_a0 bool, _a1 error) *MockValidator_CheckGeneric_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_CheckGeneric_Call[T]) RunAndReturn(run func(T) (bool, error)) *MockValidator_CheckGeneric_Call[T] {
	_c.Call.Return(run)
	return _c
}

// CheckGenerics provides a mock function with given fields: values
func (_m *MockValidator[T]) CheckGenerics(values []T) (bool, error) {
	ret := _m.Called(values)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]T) (bool, error)); ok {
		return rf(values)
	}
	if rf, ok := ret.Get(0).(func([]T) bool); ok {
		r0 = rf(values)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]T) error); ok {
		r1 = rf(values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockValidator_CheckGenerics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGenerics'
type MockValidator_CheckGenerics_Call[T Number] struct {
	*mock.Call
}

// CheckGenerics is a helper method to define mock.On call
//   - values []T
func (_e *MockValidator_Expecter[T]) CheckGenerics(values interface{}) *MockValidator_CheckGenerics_Call[T] {
	return &MockValidator_CheckGenerics_Call[T]{Call: _e.mock.On("CheckGenerics", values)}
}

func (_c *MockValidator_CheckGenerics_Call[T]) Run(run func(values []T)) *MockValidator_CheckGenerics_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T))
	})
	return _c
}

func (_c *MockValidator_CheckGenerics_Call[T]) Return(_a0 bool, _a1 error) *MockValidator_CheckGenerics_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockValidator_CheckGenerics_Call[T]) RunAndReturn(run func([]T) (bool, error)) *MockValidator_CheckGenerics_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidator[T Number](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidator[T] {
	mock := &MockValidator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
